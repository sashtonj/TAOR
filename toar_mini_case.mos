model station_staffing

  uses "mmxprs"
  uses "python3"

  declarations

    ! Constants
    diff_transactions = 2 ! "buy" "reload"
    collectors_types = 2 ! "uses terminal" "no terminal"
    diff_shifts = 3 ! 1 hr, 2 hr , 8 hr
    time_blocks = 68 ! 6:00 - 11:00 15 minute blocks
    min_staff = 1 ! Minimum staff

    ! Sets
    T = 1..diff_transactions
    transaction_type: array(T) of string

    P = 1..collectors_types
    collectors_type: array(P) of string

    L = 1..diff_shifts
    shift_lengths: array(L) of integer

    Q = 1..time_blocks

    ! Parameter
    C : array(P, L) of integer ! Cost of having a fare collector of type p working a shift of length l
    D : array(T, Q) of integer ! Demand of transaction t in time block Q
    f : array(T, P, Q) of integer ! Service ability of transaction t by collector type p in time block q
    U : array(P) of integer ! Maximum number of collector type P in a shift
    V : array(Q) of integer ! Minimum fare collectors on duty during time block q. Updated after simulation has run

    ! Decision Variables
    x: array(P, Q, L) of mpvar ! No. of fare collectors of type p to be sceduled in shift l and start on time block q
    n: array(P, Q) of mpvar ! No of fare collectors of type p on duty in time block q
    w: array(P, Q) of mpvar ! B.V that's activated if at least one collector of type p is on duty on time block q
    y: array(Q) of mpvar ! B.V that's activated if fare collectors during shift q are less than shift q-1
    z: array(Q) of mpvar ! B.V that's activated if fare collectors during shift q are more than shift q-1

    ! Export
    staff: dynamic array(P, Q) of real ! export x to python3

  end-declarations

  initialisations from "toar.dat"
    transaction_type collectors_type shift_lengths C D f U
  end-initialisations

  ! --------------------------------
  ! Decision Variable Initialization
  ! --------------------------------

  forall (p in P, q in Q, l in L) do
    x(p, q, l) is_integer
  end-do

  forall (p in P , q in Q) do
    n(p, q) is_integer
    w(p, q) is_binary
  end-do

  forall (q in 2..time_blocks) do
    y(q) is_binary
  end-do

  forall (q in 1..(time_blocks-1)) do
    z(q) is_binary
  end-do

  ! --------------------------------
  ! (A1) Objective Function
  ! --------------------------------
  total_cost:= sum(p in P, l in L, q in Q) C(p, l)*x(p, q, l)

  ! --------------------------------
  ! Constraints
  ! --------------------------------

  ! -- (A2) Links the shift-scheduling variables x and the staffing-level variables
  forall (p in P, q in Q) do
    sum(l in L , q_prime in 1..q | q_prime >= q-shift_lengths(l) and q_prime <= q) x(p, q_prime, l) = n(p, q)
  end-do

  ! -- (A3) Impose upper limits on staffing levels
  forall (p in P, q in Q) n(p, q) <= U(p) * w(p, q) ! (A3)

  ! -- (A4) Impose lower limits on staffing levels
  forall(q in Q) n(1, q) >= min_staff

  ! -- (A6) Ensure that the estimated demand is met
  forall (q in Q) do
    sum( t in T, p in P) f(t, p, q) * n(p, q) >= sum (t in T) D(t, q)
  end-do

  ! -- Prevent increases/immediate decreases in consecutive blocks
  ! -- (A7)
  forall (q in 2..time_blocks) sum(p in P) n(p, q-1) - sum(p in P) n(p, q) <= y(q)* sum(p in P) U(p)
  ! -- (A8)
  forall (q in 1..time_blocks-1) sum(p in P) n(p, q+1) - sum(p in P) n(p, q) <= z(q)* sum(p in P) U(p)
  ! -- (A9)
  forall (q in 2..time_blocks-1) y(q) +z(q) <=1
  ! -- (A10)
  forall (q in 2..time_blocks-1) y(q+1)+z(q+1) <=1


  complete := 0 ! Initial condition of the loop
  repeat
    ! -- (A11) Min number of staff required in time block. Updated by the simulation model
    forall(q in Q) do
      n(1, q) >= V(q)
    end-do

    ! Minimize objective function
    minimize(total_cost)

    ! Determine Optimality
    if (getprobstat=XPRS_OPT) then
      writeln("Solved.")
      ! Export Staff to python
      forall (p in P, q in Q) do
        staff(p, q):= getsol(n(p, q))
      end-do

      initializations to "python:"
        staff D V complete
      end-initializations

      pyrun("simulate.py")

      initializations from "python:"
        complete V
      end-initializations
    elif (getprobstat=XPRS_INF) then
        writeln("Infeasible!")
        complete := 1
    else
        writeln("Not solved to optimality")
        complete := 1
    end-if

  until (complete > 0)

end-model